var searchIndex = JSON.parse('{\
"graphics_lib":{"doc":"This crate provides wrappers around OpenGL to make 3D â€¦","t":"AAADMLLLLLLLLLLLLLMLLMMMMLLLLLMMLRDGLLLLLLLLFFFFFLMLLLLLLLLFLAAAAAAAAIDDDDDMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKMMLLLLLMLLLLLLLLLLMMLLLLLLLLLLMMMMMMDDGDGDLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLDDMMLLLLLLLLLLMLLLLMMMLLLLLLLLMMMMMLLLLLLLLLLAAAAAAAAAAFAAADLLLLLLLLLLLLLLLLLLLLLLLLMMMDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLMMLLLLMLMMMMLLMMLLLLLLLLDLLLLLLLLLLLLLLLLMMLLLLLLLLLLDLLLLLLLLLLLLLLLDDDIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDDIDDLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLDLLLLLLLLLLLLLLLLLLLDIDDDDLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLFLLLLLLDRRRRDDNRRDRNRRNRNDRRDDEENLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRDDRRLLLLLLLLLLLLLLLLLLLALLLLLMMLLLLLLLLLLMMLLLLLLLLRNEENRDNMLLLLLLLLLLLLLLLLLMLLLMLLLLLLLMLLLLLLMMMLLMMLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["cli","matrix","three_d","Cli","aspect_ratio","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","deref","deref_mut","drop","from","from_arg_matches","from_arg_matches_mut","group_id","image_width","init","into","max_depth","no_parallel","samples_per_pixel","target_fps","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","verbose","vfov","vzip","IDENTITY","Mat4","Matrix","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","generate_rotate_x","generate_rotate_y","generate_rotate_z","generate_scale","generate_translate","init","inner","into","mul","mul_assign","new","to_owned","try_from","try_into","type_id","view_matrix","vzip","animation","buffer","lights","raytracing","scene","shaders","shape","vao","Animation","Composite","ConstantRotation","Rotation","Scaling","Translation","angle_func","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","rotation","run","scaling","secs_per_loop","to_owned","to_owned","to_owned","to_owned","to_owned","translation","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","ty","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","x_func","x_func","y_func","y_func","z_func","z_func","FrameBuffer","IndexBuffer","Normal","NormalBuffer","Vertex","VertexBuffer","add_uniforms","bind","bind_attributes","bind_attributes","bind_attributes_index","bind_attributes_index","bind_textures","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","color_emission_id","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","fmt","from","from","from","from","get_id","id","id","init","init","init","init","into","into","into","into","new","new","new","new","num_indices","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","DirectionLight","PointLight","ambient","ambient","as_matrix","as_matrix","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","constant","deref","deref","deref_mut","deref_mut","diffuse","diffuse","direction","drop","drop","from","from","init","init","into","into","linear","position","quadratic","specular","specular","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","aabb","bvh","camera","hit_record","interval","lights","material","onb","opengl","pdf","random_cosine_direction","ray","shape","vector","AABB","add","axis","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","empty","from","hit","init","into","new","new_from_boxes","new_from_points","pad","to_owned","try_from","try_into","type_id","vzip","x","y","z","BVHNode","borrow","borrow_mut","bounding_box","clone","clone_dyn","clone_into","deref","deref_mut","drop","from","from","init","into","new","ray_intersects","to_owned","try_from","try_into","type_id","vzip","Camera","borrow","borrow_mut","default","deref","deref_mut","drop","from","init","into","new","render","render_parallel","try_from","try_into","type_id","vzip","HitRecord","HitRecordNoMat","blank_with_mat","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","front_face","front_face","init","init","into","into","mat","new","normal","normal","p","p","self_without_mat","set_face_normal","t","t","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Interval","add","borrow","borrow_mut","clamp","clone","clone_into","contains","deref","deref_mut","drop","empty","expand","fmt","from","init","into","max","min","new","new_from_intervals","replace_max","size","surrounds","to_owned","try_from","try_into","type_id","vzip","DiffuseLight","borrow","borrow_mut","deref","deref_mut","drop","emitted","from","init","into","new","scatter","try_from","try_into","type_id","vzip","Dielectric","EmptyMaterial","Lambertian","Material","Metal","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","emitted","from","from","from","from","init","init","init","init","into","into","into","into","new","new","new","scatter","scatter","scatter","scatter","scatter","scattering_pdf","scattering_pdf","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ONB","borrow","borrow_mut","build_from_w","default","deref","deref_mut","drop","from","index","index_mut","init","into","local","local_from_vector","try_from","try_into","type_id","u","v","vzip","w","Framebuffer","borrow","borrow_mut","deref","deref_mut","draw","drop","from","init","into","new","try_from","try_into","type_id","vzip","CosinePDF","MixturePDF","PDF","RTObjectPDF","SpherePDF","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","from","from","from","from","generate","generate","generate","generate","generate","init","init","init","init","into","into","into","into","new","new","new","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","value","value","value","value","vzip","vzip","vzip","vzip","Ray","at","borrow","borrow_mut","clone","clone_into","deref","deref_mut","direction","drop","from","init","into","new","origin","to_owned","try_from","try_into","type_id","vzip","Quad","RTObject","RTObjectVec","RotateY","Sphere","Translate","add","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","bounding_box","bounding_box","bounding_box","bounding_box","bounding_box","clear","clone","clone","clone","clone","clone","clone_dyn","clone_dyn","clone_dyn","clone_dyn","clone_dyn","clone_dyn","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","make_box","new","new","new","new","new","new_from_vec","objects","pdf_value","pdf_value","pdf_value","pdf_value","random","random","random","random","ray_intersects","ray_intersects","ray_intersects","ray_intersects","ray_intersects","ray_intersects","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Vec3","add","add","add_assign","borrow","borrow_mut","clone","clone_into","cross","data","default","deref","deref_mut","div","div","div_assign","dot","drop","fmt","for_each","from","from","init","into","length","length_squared","mul","mul","mul","near_zero","new","random","random_in_range","random_in_unit_sphere","random_on_hemisphere","reflect","refract","sub","sum","to_owned","try_from","try_into","type_id","unit","vzip","x","y","z","Scene","add_shape","borrow","borrow_mut","deref","deref_mut","draw","draw_deferred","drop","from","init","init_deferred_quad","into","new","try_from","try_into","type_id","vzip","BLINN_PHONG","BLINN_PHONG_3D_FRAG_SHADER","BLINN_PHONG_3D_LIGHTING_FRAG_SHADER","BLINN_PHONG_3D_POINT_LIGHTING_FRAG_SHADER","BLINN_PHONG_3D_SHADER","BLINN_PHONG_LIGHTING","BLINN_PHONG_POINT_LIGHTING","BlinnPhong","DEFAULT_3D_FRAG_SHADER","DEFAULT_3D_SHADER","EMISSION","EMISSION_FRAG_SHADER","Fragment","GOURAUD_3D_FRAG_SHADER","GOURAUD_3D_SHADER","Gouraud","LIGHTING_SHADER","None","PREPASS","PREPASS_FRAG_SHADER","PREPASS_SHADER","Program","Shader","ShaderProgramType","ShaderType","Vertex","bind_color_output","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compile_shader","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","link_program","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_progam","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","FOV","Shape","Transform","ZFAR","ZNEAR","animate","bind_attributes","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","draw","drop","drop","from","from","from_obj","importing","init","init","into","into","replace_animation","rotation_matrix","scaling_matrix","set_material","set_rotation","set_rotation","set_scaling","set_scaling","set_transform_matrix","set_transform_matrix","set_translation","set_translation","to_owned","transform_matrix","translation_matrix","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","DEFAULT_SPEC_EXP","FileError","IlluminationModel","ImportError","IncorrectExtension","MAT","Material","UnexpectedPolygon","ambient_color","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","diffuse_color","drop","drop","drop","emission_color","fmt","fmt","fmt","from","from","from","from_mtl","illum_model","init","init","init","into","into","into","optical_density","specular_color","specular_exp","to_owned","to_owned","transmission_filter_color","transparency","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","VAOLock","VertexArrayObject","bind","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","drop","drop","fmt","from","from","init","init","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"graphics_lib"],[3,"graphics_lib::cli"],[33,"graphics_lib::matrix"],[61,"graphics_lib::three_d"],[69,"graphics_lib::three_d::animation"],[163,"graphics_lib::three_d::buffer"],[238,"graphics_lib::three_d::lights"],[283,"graphics_lib::three_d::raytracing"],[297,"graphics_lib::three_d::raytracing::aabb"],[325,"graphics_lib::three_d::raytracing::bvh"],[346,"graphics_lib::three_d::raytracing::camera"],[363,"graphics_lib::three_d::raytracing::hit_record"],[402,"graphics_lib::three_d::raytracing::interval"],[431,"graphics_lib::three_d::raytracing::lights"],[447,"graphics_lib::three_d::raytracing::material"],[511,"graphics_lib::three_d::raytracing::onb"],[533,"graphics_lib::three_d::raytracing::opengl"],[548,"graphics_lib::three_d::raytracing::pdf"],[614,"graphics_lib::three_d::raytracing::ray"],[634,"graphics_lib::three_d::raytracing::shape"],[751,"graphics_lib::three_d::raytracing::vector"],[799,"graphics_lib::three_d::scene"],[817,"graphics_lib::three_d::shaders"],[971,"graphics_lib::three_d::shape"],[1023,"graphics_lib::three_d::shape::importing"],[1087,"graphics_lib::three_d::vao"]],"d":["This module will be removed soon","A 4x4 matrix implementation, with functions for matrix â€¦","The three_d module provides support for loading and â€¦","A struct representing command-line arguments","The given aspect ratio","","","","","","","","","","Returns the argument unchanged.","","","","The given image width","","Calls <code>U::from(self)</code>.","The given maximum depth","Whether the engine should render using multiple threads","The given samples per pixel","The given target FPS","","","","","","Whether the engine should print debug output","The given vertical FOV","","Define the identity matrix.","A wrapper struct around a Matrix.","Define a matrix to be a 4x4 matrix of floating-point â€¦","","","","","","","","Returns the argument unchanged.","Generates a rotation matrix around the x-axis, given an â€¦","Generates a rotation matrix around the y-axis, given an â€¦","Generates a rotation matrix around the z-axis, given an â€¦","Generate a scaling matrix.","Generates a translation matrix given offsets in along all â€¦","","The inner Matrix value.","Calls <code>U::from(self)</code>.","","","Create a new wrapper from a Matrix.","","","","","Create a view matrix given the cameraâ€™s position, the â€¦","","A trait representing a time-dependent animation, along â€¦","Wrapper structs around OpenGL Buffers.","A module with structs representing different kinds of â€¦","This module provides support for a basic raytracing engine.","A Scene represents a set of lights, shapes, and a specific â€¦","A wrapper around an OpenGL shader program","A shape with given vertex coordinates and normal vectors.","This module provides a wrapper around an OpenGL â€¦","An Animation is any struct that can define a â€¦","This struct represents a combination of animations.","This represents a constant rotation with some given period â€¦","This represents a rotation along a specified axis, with â€¦","This represents scaling in all three dimensions, according â€¦","This represents a translation in along all three axes, â€¦","The function determining the current angle. This should â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A list of the rotation animations to be applied","Runs the animation, given the transform to mutate and the â€¦","A list of the scaling animations to be applied","The period of rotation","","","","","","A list of the translation animations to be applied","","","","","","","","","","","The axis of rotation","The axis of rotation.","","","","","","","","","","","The scaling in the x-dimension","The function determining translation along the x-axis","The scaling in the y-dimension","The function determining translation along the y-axis","The scaling in the z-dimension","The function determining translation along the z-axis","A wrapper around a frame buffer and its associated â€¦","A wrapper about an index buffer (EBO).","A type alias for a normal, or a three-dimensional vector","A wrapper struct around a normal buffer (VBO).","A type alias for a vertex, or a point in 3D space.","A wrapper struct around a vertex buffer (VBO).","Binds the texture uniforms, given the associated names and â€¦","Binds the frame buffer.","Bind the attributes of this buffer to a specific program.","Bind the attributes of this buffer to a specific program.","Bind the attributes of this buffer to a specific program, â€¦","Bind the attributes of this buffer to a specific program, â€¦","Binds the associated textures.","","","","","","","","","FIXME: This shouldnâ€™t be public","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Access the OpenGL id of this buffer.","Access the OpenGL id of this buffer.","Access the OpenGL id of this buffer.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new normal buffer out of a list of normals.","Create a new vertex buffer out of a list of indices.","Creates a new frame buffer, given the dimensions of the â€¦","Create a new vertex buffer out of a list of vertices.","The number of indices in this buffer.","","","","","","","","","","","","","","","","","A light that points in a specified direction.","A light that emanates from a specific point.","The ambient color of the light.","The ambient color of the light.","Convert the light to a 4x4 matrix.","Convert the light to a 4x4 matrix.","","","","","","","","","The constant attenuation of the light.","","","","","The diffuse color of the light.","The diffuse color of the light.","The direction of the light.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The linear attenuation of the light.","The position of the light.","The quadratic attenuation of the light.","The specular color of the light.","The specular color of the light.","","","","","","","","","","","An axis-aligned bounding box","A Bounding Volume Hierarchy","A camera to render raytracing scenes","A record of information about a ray intersection","An interval along the number line","A material for objects that emit light","A raytracing material","An othornormal basis, used for transforming vectors â€¦","Renders the pixel data","A Probability Density Function","Generate a random vector in a random direction, without â€¦","A ray, with an origin and direction","A trait representing a raytracing object","A 3-dimensional vector","A struct representing an axis-aligned bounding box This is â€¦","","Turn a number specifying a dimensional axis into the â€¦","","","","","","","","","Create an empty bounding box","Returns the argument unchanged.","Determine whether a given ray in a given interval â€¦","","Calls <code>U::from(self)</code>.","Create a bounding box given three intervals along each of â€¦","Create a bounding box from two smaller bounding boxes","Create a bounding box given two opposite points of the box","Return an AABB that has no side narrower than some delta, â€¦","","","","","","The interval along the x-axis that the bounding box â€¦","The interval along the y-axis that the bounding box â€¦","The interval along the z-axis that the bounding box â€¦","A struct representing a BVHNode A BVH renders raytracing â€¦","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new BVHNode from a list of raytracing objects, â€¦","","","","","","","A struct representing a camera into the scene","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new camera","Render a scene, given the world of objects, the list of â€¦","Render a scene, given the world of objects, the list of â€¦","","","","","A struct representing the result of a hit","This struct represents a Hit Record, without the material â€¦","Create a default material, except that it has the given â€¦","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Whether the ray hit the front or back face of the object","Whether the ray hit the front or back face of the object","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The material that was hit","Create a new material, given information about the circle â€¦","The normal vector to the hit","The normal vector to the hit","The point that was hit at (p = r0 + r*t)","The point that was hit at (p = r0 + r*t)","Return the hit record without the material","Determine in which direction the normal points, and â€¦","The â€˜tâ€™ at which the ray hit (using the ray form r0 + râ€¦","The â€˜tâ€™ at which the ray hit (using the ray form r0 + râ€¦","","","","","","","","","A struct representing an interval between two numbers","","","","Clamp a value to be within the array","","","Check if the interval contains a number","","","","Create an empty interval, which contains no numbers","Expand the interval, adding half of delta on each side","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","The maximum value of the interval","The minimum value of the interval","Create an interval, given two endpoints","Create a super-interval that encapsulates two intervals","Replace the maximum value with a new value, and then â€¦","Compute the size of the interval","Check if the interval surrounds the number This method â€¦","","","","","","A struct representing a light that emits light","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a light, given the color that should be emitted","","","","","","A struct representing Dielectric materials These are â€¦","A struct representing an empty material Although this â€¦","A struct representing a normal object","A trait representing a generic material","A struct representing a metal material","","","","","","","","","","","","","","","","","","","","","Compute the emitted light of a material /// This method is â€¦","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new Lambertian, given the materialâ€™s color","Create a new metal material, given the metalâ€™s color and â€¦","Create a new Dielectric material, given an index of â€¦","Compute how a ray would scatter off of the material, given â€¦","","","","","Compute the PDF of the material This method is optional","","","","","","","","","","","","","","","","","","A struct representing an orthonormal basis An orthonormal â€¦","","","Create an ONB from a given vector","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Transform the input vector (as component values) to be â€¦","Transform the input vector to be relative to the ONB","","","","Get the first vector","Get the second vector","","Get the third vector","A struct representing a framebuffer. which can be used to â€¦","","","","","Copy pixel data to the framebuffer, and then blit it to â€¦","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new framebuffer, given the image dimensions","","","","","A struct representing the PDF of uniformly sampling over a â€¦","A struct representing a probability density function for a â€¦","A trait representing the PDF of a surface or object A PDF, â€¦","A struct representing a probability density function of a â€¦","A struct representing the PDF of uniformly sampling over a â€¦","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Compute a random reflection vector, biased towards â€¦","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new hemisphere PDF, given an orthonormal basis","Create a new PDF of a general raytracing object, given the â€¦","Create a new mixture PDF, based on two PDFs","","","","","","","","","","","","","Compute the chance that reflections off of the surface â€¦","","","","","","","","","A struct to represent a Ray A Ray has an origin point and â€¦","Compute the endpoint given some progression t along the ray","","","","","","","Get the direction of the ray","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new ray, given the rayâ€™s origin and direction","Get the origin of the ray","","","","","","A struct representing a quadrilateral in 3-dimensional â€¦","A trait representing a raytracing object A raytracing â€¦","A struct representing a list of raytracing objects","A struct representing an object that has been rotated â€¦","A struct represeting a sphere","A struct representing a translation of an object The â€¦","Add a new object to the vector","","","","","","","","","","","Compute a bounding box that contains the object","","","","","","Clear the vector","","","","","","Clone the object into a Box","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a 3-dimension box, given two points of opposite â€¦","Create a new, empty object vector","Create a new sphere, given a center point, a radius, and a â€¦","Create a new quadrilateral, given one corner q, two â€¦","Create a new translation, given a base object and an â€¦","Create a new Y rotation, given the base option and the â€¦","Create a new object vector, given a vector of objects","Get the list of objects contained in the vector","Compute the probability that a ray starting from a certain â€¦","","","","Compute a random ray bouncing off the object, given the â€¦","","","","Compute whether the given ray in the specified interval â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A struct representing a three-dimensional vector","","","","","","","","Compute the cross product of two vectors","The x, y, and z components of the vector","","","","","","","Compute the dot product of two vectors","","","Apply a function to each of the components of the vector","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Compute the length of the vector","Compute the squared length of the vector","","","","Check whether all the values of the vector are within 1e-8 â€¦","Create a new vector from the given array","Generate a vector of random values","Generate a vector with random values within the given range","Generate a random vector within the unit circle This â€¦","Generate a random vector in a hemisphere in the direction â€¦","Reflect off of a surface, given the incoming vector and â€¦","Refract through a material, given the incoming vector, the â€¦","","","","","","","Get the unit vector with the same direction as the input â€¦","","Get the value of the x-component of the vector","Get the value of the y-component of the vector","Get the value of the z-component of the vector","A Scene represents a set of lights, shapes, and a specific â€¦","Returns the index of the shape vector where the shape is â€¦","","","","","Render the scene to the screen, given the window, the â€¦","Draw using deferred rendering. Deferred rendering allows â€¦","","Returns the argument unchanged.","","If using deferred rendering, this function must be called â€¦","Calls <code>U::from(self)</code>.","Create a new scene given a view matrix, a program to use, â€¦","","","","","Basic Blinn-Phong shading.","Shader code for a Blinn-Phong fragment shader.","Blinn-Phong fragment shader code for the lighting step of â€¦","Blinn-Phong fragment shader code for the point lighting â€¦","Shader code for a Blinn-Phong shader.","Program for the lighting stage of deferred rendering, â€¦","Program for the point lighting stage of deferred â€¦","Blinn-Phong shading, which accounts for diffuse lighting â€¦","Shader code for a basic diffuse fragment shader.","Shader code for a basic diffuse shader.","Program for adding emission lighting to deferred rendering.","deferred rendering shader that adds emission lighting.","Represents a fragment shader.","Shader code for a Gouraud fragment shader.","Shader code for a Gouraud shader.","Gouraud shading, which accounts for the angle of the shape.","Blinn-Phong shader code for the lighting step of deferred â€¦","No shading, just diffuse lighting.","Program for the prepass step of deferred rendering.","Fragment shader code for the prepass step of deferred â€¦","Shader code for the prepass step of deferred rendering.","A wrapper struct around an OpenGL program.","A wrapper struct around an OpenGL shader.","Represents the types of shader.","This enum represents the default shader types.","Represents a vertex shader.","Bind the color output to a specific name in the program.","","","","","","","","","","","","","","","","","","","","","Compiles a shader, given the shader type and the source â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Links a vertex shader and a fragment shader into a program.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tells OpenGL to use this program for drawing shapes.","","","","","","","","","","Defines the camera FOV.","A shape with given vertex coordinates and normal vectors.","Represents a transformation, made up of a rotation matrix, â€¦","Defines the far plane of the camera.","Defines the near plane of the camera.","Run one step of animation, which updates the shapeâ€™s 3D â€¦","Bind the position and normal attributes of this shape to â€¦","","","","","","","","","","","","Draws the shape to the set framebuffer, given the light â€¦","","","Returns the argument unchanged.","Returns the argument unchanged.","Loads the shape from the given obj file.","Methods for loading a shape from modeling files.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Swap out the current animation for a different one.","The rotation matrix for the transform.","The scaling matrix for the transform.","Sets the shapeâ€™s material.","Sets the shapeâ€™s rotation matrix.","Set the rotation matrix.","Sets the shapeâ€™s scaling matrix.","Set the scaling matrix.","Sets the shapeâ€™s transformation matrix.","Set the transform matrix.","Sets the shapeâ€™s translation matrix.","Set the translation matrix.","","The full transformation matrix of this 3D transform.","The translation matrix for the transform.","","","","","","","","","If an object has no specified specular exponent, this â€¦","An error returned by the file system.","These are all the illumination models of the OBJ file â€¦","An enum represents errors that can happen in the importing â€¦","An error returned if the file doesnâ€™t have an extension â€¦","FIXME: Remove this!","This struct represents an MTL material/","Our importing functions currently assumed the models have â€¦","The ambient color of the object.","","","","","","","","","","","","","","","","","","The diffuse color of the object.","","","","The emission color of the object.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Load a material from an MTL file.","The illumination model of the object.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The optical density of the object.","The specular color of the object.","The specular exponent of the object.","","","The transmission color filter of the object.","The transparency of the object.","","","","","","","","","","","","","This represents a theoretical lock on the VAO. Some OpenGL â€¦","A VertexArrayObject represents an OpenGL VAO.","This method binds an already-existing VAO and gives back a â€¦","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new VertexArrayObject.","","","","","","","",""],"i":[0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,10,10,10,10,10,10,10,10,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,93,14,15,16,17,93,14,15,16,17,14,15,16,17,93,14,15,16,17,93,14,15,16,17,93,14,15,16,17,93,14,15,16,17,93,14,15,16,17,93,14,15,16,17,93,14,15,16,17,93,86,93,14,93,14,15,16,17,93,93,14,15,16,17,93,14,15,16,17,14,15,93,14,15,16,17,93,14,15,16,17,16,17,16,17,16,17,0,0,0,0,0,0,19,19,22,23,22,23,19,22,25,19,23,22,25,19,23,19,22,25,19,23,22,25,19,23,22,22,25,25,19,19,23,23,23,22,25,19,23,25,22,23,22,25,19,23,22,25,19,23,22,25,19,23,25,22,25,19,23,22,25,19,23,22,25,19,23,22,25,19,23,0,0,34,35,34,35,34,35,34,35,34,35,34,35,35,34,35,34,35,34,35,34,34,35,34,35,34,35,34,35,35,35,35,34,35,34,35,34,35,34,35,34,35,34,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,47,47,52,47,52,47,52,47,52,47,52,47,52,47,52,47,52,47,52,47,47,47,52,47,52,47,47,47,52,47,52,47,52,47,52,47,52,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,0,0,0,0,57,54,55,56,57,54,55,56,57,54,55,56,57,54,55,56,57,54,55,56,50,57,54,55,56,57,54,55,56,57,54,55,56,54,55,56,50,57,54,55,56,50,54,57,54,55,56,57,54,55,56,57,54,55,56,57,54,55,56,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,0,0,59,60,61,62,59,60,61,62,59,60,61,62,59,60,61,62,59,60,61,62,59,60,61,62,63,59,60,61,62,59,60,61,62,59,60,61,62,60,61,62,59,60,61,62,59,60,61,62,59,60,61,62,63,59,60,61,62,59,60,61,62,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,0,0,0,45,45,64,65,66,67,45,64,65,66,67,43,45,64,65,66,67,45,45,64,65,66,67,43,45,64,65,66,67,45,64,65,66,67,45,64,65,66,67,45,64,65,66,67,45,64,65,66,67,45,64,65,66,67,45,64,65,66,67,45,64,65,66,67,0,45,64,65,66,67,45,45,43,45,64,65,43,45,64,65,43,45,64,65,66,67,45,64,65,66,67,45,64,65,66,67,45,64,65,66,67,45,64,65,66,67,45,64,65,66,67,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,72,72,72,72,72,72,72,72,72,72,0,72,72,72,72,72,72,0,0,0,0,0,0,0,77,0,0,0,0,79,0,0,77,0,77,0,0,0,0,0,0,0,79,21,79,77,80,21,81,82,83,84,85,79,77,80,21,81,82,83,84,85,77,77,0,79,77,80,21,81,81,82,82,83,83,84,84,85,85,79,77,80,21,81,82,83,84,85,79,77,80,80,21,21,81,82,83,84,85,77,80,21,77,80,21,79,77,80,21,81,82,83,84,85,79,77,80,21,81,82,83,84,85,79,77,80,21,81,82,83,84,85,0,77,79,77,80,21,81,82,83,84,85,79,77,80,21,81,82,83,84,85,79,77,80,21,81,82,83,84,85,21,79,77,80,21,81,82,83,84,85,0,0,0,0,0,73,73,73,18,73,18,18,18,18,73,18,73,18,73,73,18,73,18,73,0,73,18,73,18,73,18,18,73,73,18,73,18,73,18,73,18,18,18,18,73,18,73,18,73,18,73,18,0,87,0,0,87,0,0,87,88,87,89,88,87,89,88,89,88,89,88,88,87,89,88,87,89,88,88,87,89,88,88,87,89,88,87,89,88,88,88,87,89,88,87,89,88,88,88,88,89,88,88,88,87,89,88,87,89,88,87,89,88,87,89,88,0,0,92,31,92,31,92,31,92,31,92,31,31,92,92,92,31,92,31,92,31,92,92,31,92,31,92,31,92,31,92],"f":[0,0,0,0,0,[1,1],[1,1],[[]],[[]],[[],1],[[],1],[2],[2],[2],[[]],[3,[[6,[4,5]]]],[3,[[6,[4,5]]]],[[],[[8,[7]]]],0,[[],2],[[]],0,0,0,0,[[],6],[[],6],[[],9],[[4,3],[[6,[5]]]],[[4,3],[[6,[5]]]],0,0,[[]],0,0,0,[[]],[[]],[10,10],[[]],[2],[2],[2],[[]],[11,10],[11,10],[11,10],[[[12,[11]]],10],[[[8,[11]],[8,[11]],[8,[11]]],10],[[],2],0,[[]],[[10,10]],[[10,10]],[13,10],[[]],[[],6],[[],6],[[],9],[[[12,[11]],[12,[11]],[12,[11]]],10],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[15,15],[16,16],[17,17],[[]],[[]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],0,[[11,18]],0,0,[[]],[[]],[[]],[[]],[[]],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[19,[12,[20]],21]],[19],[[22,21,20]],[[23,21,20]],[[22,24]],[[23,24]],[19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[2],[2],[2],[2],[2],[2],[2],[2],[22],[2],[2],[25],[2],[19],[23],[2],[[23,26],27],[[]],[[]],[[]],[[]],[25,28],[22,28],[23,28],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[[30,[29]],31],22],[[[30,[28]],31],25],[[32,32],19],[[[30,[33]],31],23],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],0,0,0,0,[34,13],[35,13],[[]],[[]],[[]],[[]],[34,34],[35,35],[[]],[[]],0,[2],[2],[2],[2],0,0,0,[2],[2],[[]],[[]],[[],2],[[],2],[[]],[[]],0,0,0,0,0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],9],[[],9],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[],36],0,0,0,0,[[37,36]],[[37,38],39],[[]],[[]],[37,37],[[]],[[],37],[2],[2],[2],[[],37],[[]],[[37,40,39],41],[[],2],[[]],[[39,39,39],37],[[37,37],37],[[36,36],37],[37,37],[[]],[[],6],[[],6],[[],9],[[]],0,0,0,0,[[]],[[]],[42,37],[42,42],[42,[[44,[43]]]],[[]],[2],[2],[2],[45,42],[[]],[[],2],[[]],[[[46,[[44,[43]]]],2,2],42],[[42,40,39],[[8,[47]]]],[[]],[[],6],[[],6],[[],9],[[]],0,[[]],[[]],[[],48],[2],[2],[2],[[]],[[],2],[[]],[[11,32,36,36,36,32,32,11,36],48],[[48,43,[8,[43]],41,49]],[[48,43,[8,[43]],41,49]],[[],6],[[],6],[[],9],[[]],0,0,[[[51,[50]]],47],[[]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[[]],[[]],0,0,[[],2],[[],2],[[]],[[]],0,[[11,40,36,11,[51,[50]]],47],0,0,0,0,[47,52],[[47,40,36]],0,0,[[],6],[[],6],[[],6],[[],6],[[],9],[[],9],[[]],[[]],0,[[39,11]],[[]],[[]],[[39,11],11],[39,39],[[]],[[39,11],41],[2],[2],[2],[[],39],[[39,11],39],[[39,26],27],[[]],[[],2],[[]],0,0,[[11,11],39],[[39,39],39],[[39,11],39],[39,11],[[39,11],41],[[]],[[],6],[[],6],[[],9],[[]],0,[[]],[[]],[2],[2],[2],[[53,40,52,11,11,36],36],[[]],[[],2],[[]],[36,53],[[53,40,52],8],[[],6],[[],6],[[],9],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[40,52,11,11,36],36],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[36,54],[[36,11],55],[11,56],[[40,52],8],[[57,40,52],8],[[54,40,52],8],[[55,40,52],8],[[56,40,52],8],[[40,47,40],11],[[54,40,47,40],11],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],0,[[]],[[]],[36,58],[[],58],[2],[2],[2],[[]],[[58,2]],[[58,2]],[[],2],[[]],[[58,11,11,11],36],[[58,36],36],[[],6],[[],6],[[],9],[58,36],[58,36],[[]],[58,36],0,[[]],[[]],[2],[2],[[49,32,32,11]],[2],[[]],[[],2],[[]],[[32,32],49],[[],6],[[],6],[[],9],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[]],[[]],[[]],[[]],[[],36],[59,36],[60,36],[61,36],[62,36],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[36,60],[[[44,[43]],36],61],[[[44,[63]],[44,[63]]],62],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],9],[[],9],[[],9],[[],9],[36,11],[[59,36],11],[[60,36],11],[[61,36],11],[[62,36],11],[[]],[[]],[[]],[[]],0,[[40,11],36],[[]],[[]],[40,40],[[]],[2],[2],[40,36],[2],[[]],[[],2],[[]],[[36,36],40],[40,36],[[]],[[],6],[[],6],[[],9],[[]],0,0,0,0,0,0,[[45,[44,[43]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[45,37],[64,37],[65,37],[66,37],[67,37],[45],[45,45],[64,64],[65,65],[66,66],[67,67],[[],[[44,[43]]]],[45,[[44,[43]]]],[64,[[44,[43]]]],[65,[[44,[43]]]],[66,[[44,[43]]]],[67,[[44,[43]]]],[[]],[[]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[36,36,[51,[50]]],[[44,[43]]]],[[],45],[[36,11,[51,[50]]],64],[[36,36,36,[51,[50]]],65],[[[44,[43]],36],66],[[[44,[43]],11],67],[[[46,[[44,[43]]]]],45],[45,[[46,[[44,[43]]]]]],[[36,36],11],[[45,36,36],11],[[64,36,36],11],[[65,36,36],11],[36,36],[[45,36],36],[[64,36],36],[[65,36],36],[[40,39],[[8,[47]]]],[[45,40,39],[[8,[47]]]],[[64,40,39],[[8,[47]]]],[[65,40,39],[[8,[47]]]],[[66,40,39],[[8,[47]]]],[[67,40,39],[[8,[47]]]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],0,[[36,36]],[[36,37]],[[36,36]],[[]],[[]],[36,36],[[]],[[36,36],36],0,[[],36],[2],[2],[[36,11]],[[36,32]],[[36,32]],[[36,36],11],[2],[[36,26],27],[36],[[]],[[[12,[11]]],36],[[],2],[[]],[36,11],[36,11],[[36,11]],[[36,36]],[[36,32]],[36,41],[[[12,[11]]],36],[68,36],[[68,[0,[[69,[11]],70]]],36],[68,36],[[68,36],36],[[36,36],36],[[36,36,11],36],[[36,36]],[71,36],[[]],[[],6],[[],6],[[],9],[36,36],[[]],[36,11],[36,11],[36,11],0,[[72,73],2],[[]],[[]],[2],[2],[[72,11,[76,[74,75]]]],[[72,11,[76,[74,75]],21,21,21,21,19]],[2],[[]],[[],2],[[],41],[[]],[[10,21,[46,[34]],[46,[35]]],72],[[],6],[[],6],[[],9],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[21,20]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[77,77],[[]],[[78,79],80],[2],[2],[2],[2],[2],[81,21],[82,21],[2],[2],[83,21],[2],[84,21],[85,21],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[80],[2],[21],[2],[2],[2],[2],[2],[2],[[77,77],41],[[80,80],41],[[21,21],41],[[],41],[[],41],[[],41],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[80,80],21],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[73,11]],[[73,21]],[[]],[[]],[[]],[[]],[18,18],[[]],[[],18],[2],[2],[2],[2],[[73,34,10,21]],[2],[2],[[]],[[]],[[78,77,[8,[18]],[8,[[44,[86]]]],41],[[6,[73,87]]]],0,[[],2],[[],2],[[]],[[]],[[73,[44,[86]]]],0,0,[[73,88]],[[73,10]],[[18,10]],[[73,10]],[[18,10]],[[73,[8,[10]],[8,[10]],[8,[10]]]],[[18,[8,[10]],[8,[10]],[8,[10]]]],[[73,10]],[[18,10]],[[]],0,0,[[],6],[[],6],[[],6],[[],6],[[],9],[[],9],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[89,89],[88,88],[[]],[[]],[[],88],[2],[2],[2],[2],[2],[2],0,[2],[2],[2],0,[[87,26],27],[[89,26],27],[[88,26],27],[[]],[[]],[[]],[78,[[6,[[91,[90,88]],87]]]],0,[[],2],[[],2],[[],2],[[]],[[]],[[]],0,0,0,[[]],[[]],0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],9],[[],9],[[],9],[[]],[[]],[[]],0,0,[92,[[8,[[0,[31]]]]]],[[]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[31],[92],[2],[[92,26],27],[[]],[[]],[[],2],[[],2],[[]],[[]],[[],[[8,[0]]]],[[],6],[[],6],[[],6],[[],6],[[],9],[[],9],[[]],[[]]],"c":[],"p":[[3,"Command"],[15,"usize"],[3,"ArgMatches"],[3,"Cli"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[3,"TypeId"],[3,"Mat4"],[15,"f32"],[15,"array"],[6,"Matrix"],[3,"ConstantRotation"],[3,"Rotation"],[3,"Scaling"],[3,"Translation"],[3,"Transform"],[3,"FrameBuffer"],[3,"CString"],[3,"Program"],[3,"NormalBuffer"],[3,"VertexBuffer"],[6,"GLint"],[3,"IndexBuffer"],[3,"Formatter"],[6,"Result"],[6,"GLuint"],[6,"Normal"],[15,"slice"],[3,"VAOLock"],[15,"i32"],[6,"Vertex"],[3,"DirectionLight"],[3,"PointLight"],[3,"Vec3"],[3,"AABB"],[15,"u32"],[3,"Interval"],[3,"Ray"],[15,"bool"],[3,"BVHNode"],[8,"RTObject"],[3,"Box"],[3,"RTObjectVec"],[3,"Vec"],[3,"HitRecord"],[3,"Camera"],[3,"Framebuffer"],[8,"Material"],[3,"Arc"],[3,"HitRecordNoMat"],[3,"DiffuseLight"],[3,"Lambertian"],[3,"Metal"],[3,"Dielectric"],[3,"EmptyMaterial"],[3,"ONB"],[3,"SpherePDF"],[3,"CosinePDF"],[3,"RTObjectPDF"],[3,"MixturePDF"],[8,"PDF"],[3,"Sphere"],[3,"Quad"],[3,"Translate"],[3,"RotateY"],[3,"ThreadRng"],[8,"SampleRange"],[8,"Clone"],[8,"Iterator"],[3,"Scene"],[3,"Shape"],[3,"PossiblyCurrent"],[3,"Window"],[3,"ContextWrapper"],[4,"ShaderType"],[15,"str"],[4,"ShaderProgramType"],[3,"Shader"],[3,"BLINN_PHONG"],[3,"PREPASS"],[3,"BLINN_PHONG_LIGHTING"],[3,"BLINN_PHONG_POINT_LIGHTING"],[3,"EMISSION"],[8,"Animation"],[4,"ImportError"],[3,"Material"],[4,"IlluminationModel"],[3,"String"],[3,"HashMap"],[3,"VertexArrayObject"],[3,"Composite"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
